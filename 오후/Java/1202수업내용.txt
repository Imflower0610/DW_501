<오전수업>
1. 패키지 만들기 (generic)
	ㄴ메인있는 클래스 만들기 (main_method)
	ㄴ 그냥 클래스 만들기(seafood_box, seafood, 오징어, 새우, 참치, 소고기)
2.  새우, 오징어, 참치, 소고기에
	public int among;
	public String origin;
3. 제네릭 타입사용해야 하는 이유
1.) 누구나 이용가능(숫자, 글자 등)하지만 데이터 타입이 정해지지 않아서 불안정
public class seafood {
 Object item;
 public void store(Object item) {
 	this.item = item;}
	 
 public Object 판매() {
	 return item;
 }
}
2.) 데이터 타입이 정해졌지만 지정된 데이터타입만 사용가능
public class 오징어 {
	public int among;
	public String origin;

public void store(int among, String origin) {
	this.among =among;
	this.origin = origin;
}
public 오징어 판매() {
	return this;
}
}
3.) 1,2의 장점을 합쳐서 누구나 이용할 수 있으면서도 데이터 타입이 정해지도록 하는게 제너릭
	public static void main(String[] args) {
		ArrayList<Object> list = new ArrayList<>();
		
		list.add(100);
		list.add(200);
		list.add(300);
		list.add(3.14);
		list.add(짱영츄);
		
		System.out.println(list);
			
	}
}
4. 제너릭 사용방법
ArrayList<> 쓸때처럼 클래스 명 뒤에 <T>를 쓰면 
main 메소드에서 클래스 호출할때 어떤 타입을 넣어도 다 사용가능

 * 제너릭에 제한 거는 방법
 public class seafood_box <T extends seafood & 인터페이스>
 => 이런 식으로 seafood를 상속하는 애들만 제한하거나
 => 인터페이스 사용해서 상속처럼 제한하거나

* 제네릭에 사용되는 타입종류
 T - 타입, V - 값, K - 키, N - 숫자

* 한번에 여러 타입 사용가능
  이런식으로 => seafood_box <T,V> 
 

<오후수업>
1. login3.html 만들기

<!DOCTYPE html >
<html>
<head>
<meta charset="UTF-8">
<title></title>
</head>
<body>
	<h3>회원가입</h3>
	<input id="userId" type="text" placeholder="아이디를 입력해주세요">
	<input id="userName" type="text" placeholder="이름을 입력해주세요">
	<input id="userPw" type="password" placeholder="비밀번호를 입력해주세요">
	<button type="button" onclick="doJoin()">회원가입</button>
</body>
<script src="https://code.jquery.com/jquery-3.6.1.js"
	integrity="sha256-3zlB5s2uwoUzrXK3BT7AX3FyvojsraNFxCc2vC/7pNI="
	crossorigin="anonymous"></script>
<script>
</script>
</html>

2. script부분에 빈칸체크하는 js 만들기
3. vo에 UsersVO 만들고

@Getter
@Setter
public class UsersVO {
	private String id;
	private String pw;
	private String name;
}
* getter, setter 두번 쓰기 귀찮으면 @data도 가능

4. dbeaber에서 테이블 만들기
create table users(
	id varchar(50) comment '유저 아이디',
	pw varchar(200) comment '비밀번호',
	name varchar(30) comment '유저 이름'
)

5.empmapper에서	
 int insertUsers(UsersVO vo);

6.pagecontroller에서
@GetMapping("/login3")
	public String calLoginPage3() {
		return "login3";
	}
7.apicontroller에서
@PostMapping("api/v1/users")
	public int callUsersJoin(@RequestBody UsersVO vo){
		return empMapper.insertUsers(vo);
	}
8. html에서 회원가입기능 구현하기


로그인 기능 만들기
1.sql문 작성
<!-- count는 int형으로 리턴 -->
<select id="selectUsersFindById" resultType = "integer">
	select count(*)
	from users 
	where id = #{id} and pw = #{pw}
</select>
2.mapper작성
int selectUsersFindById(UsersVO vo);
3.api컨트롤러작성
@PostMapping("api/v1/login")
	public int callUsersLogin(@RequestBody UsersVO vo){
		return empMapper.selectUsersFindById(vo);
	}
4. login3 html에 내용작성
*오류 났을때
앞자리가 4면 프론트문제(99.999%오타)
앞자리가 5면 백엔드문제

페이지 연결
1. 연결할 페이지 만들기 users
2. pagecontroller에 
	@GetMapping("/users")
	public String calluserspage() {
		return "users";
	}
3. login3html에 추가
	location.href ="/users";